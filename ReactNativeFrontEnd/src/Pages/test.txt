import React, {useState} from 'react';
import {Text, View, Button, Image} from 'react-native';
import {launchImageLibrary} from 'react-native-image-picker';
import axios from 'axios';

export default function FileUploadTestScreen() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [response, setResponse] = useState(null);
  const openImagePicker = () => {
    const options = {
      mediaType: 'photo',
      includeBase64: false,
      maxHeight: 2000,
      maxWidth: 2000,
    };

    launchImageLibrary(options, response => {
      if (response.didCancel) {
        console.log('User cancelled image picker');
      } else if (response.errorCode) {
        console.log('Image picker error: ', response.errorMessage);
      } else {
        let imageUri = response.uri || response.assets[0].uri;
        setResponse(response.assets);
        console.log(response.assets);
        setSelectedImage(imageUri);
      }
    });
  };

  const uploadImage = async () => {
    if (selectedImage) {
        
      const formData = new FormData();
      formData.append('my-image-file', {
        uri: response.uri,
        type: response.type,
        name: response.fileName,
      });
      
      try {
        console.log(formData);
        const response = await axios.post(
          'http://localhost:3001/image-upload',
          formData,
          {
            headers: {
              'Content-Type': 'multipart/form-data',
            },
          },
        );
        console.log(response);
        if (response.status === 200) {
          // Handle success
          console.log('Image uploaded successfully.');
          // You can reset the selectedImage state here if needed.
        } else {
          // Handle error
          console.error('Image upload failed.');
        }
      } catch (error) {
        console.error('Error uploading image:', error);
      }
    } else {
      console.log('No image selected.');
    }
  };

  return (
    <View style={{flex: 1, justifyContent: 'center'}}>
      {selectedImage && (
        <Image
          source={{uri: selectedImage}}
          style={{flex: 1}}
          resizeMode="contain"
        />
      )}
      <View style={{marginTop: 20}}>
        <Button title="Choose from Device" onPress={openImagePicker} />
      </View>
      <View style={{marginTop: 20}}>
        <Button title="Upload" onPress={uploadImage} />
      </View>
    </View>
  );
}



const express = require("express");
const app = express();
const http = require("http");
const cors = require("cors");
const mongoose = require("mongoose");
const multer = require('multer');
const bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(cors());
app.use(express.json());
app.use(express.static("public"));
const corsOrigin = 'http://localhost:3000';
app.use(cors({
  origin:[corsOrigin],
  methods:['GET','POST'],
  credentials: true 
})); 
// ==============Mongodb Connection===================
mongoose.connect("mongodb://localhost:27017/AudioImageDb", { useNewUrlParser: true });

const db = mongoose.connection;
db.on("connected", () => {
  console.log("MongoDB is connected");
});

db.on('error', (error) => {
  console.error('MongoDB connection error:', error);
});
// ======================BASIC NO BACKEND=====================

app.get("/simpletextresponse", (req, res) => {
  res.send("hi");
});

//===================================================MONGODB BACKEND
const loginSchema = {
  "userId" : Number,
  "password" : Number,
}
const Login=mongoose.model("Login", loginSchema);

//GET : NO BODY 
//POST : BODY EXAMPLE
//DELETE : PARAMETER EXAMPLE
// PUT / PATCH : BODY + PARAMETER EXAMPLE

//CHAINING OF API EXAMPLE
// GET HAS NO PARAMETER NO BODY , RETURNS ALL
// POST HAS BODY NO PARAMETER TO JUST POST IT INTO LOGIN
app.route("/SimpleCRUDMongoDB") 
.get(async function(req, res) {
  try {
    const logins = await Login.find();
    res.status(200).json(logins);
  } catch (error) {
    console.error("Error fetching logins:", error);
    res.status(500).json({ error: "Internal server error" });
  }
}) 
.post(async function(req, res) {
  try {
    const { userId, password } = req.body;
    const login = new Login({ userId, password });
    await login.save();
    res.status(201).json(login);
  } catch (error) {
    console.error("Error creating login:", error);
    res.status(500).json({ error: "Internal server error" });
  }
})

//NON CHAINING EXAMPLES 
//delete : ONLY PARAM
//PUT AND PATCH : PARAM AND BODY

app.delete("/SimpleCRUDMongoDB/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    await Login.deleteOne({ userId: userId });
    res.status(204).send();
  } catch (error) {
    console.error("Error deleting login:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.put("/SimpleCRUDMongoDB/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const { password } = req.body;
    await Login.updateOne({ userId: userId }, { password: password });
    res.status(200).json({ message: 'User updated successfully' });
  } catch (error) {
    console.error("Error updating login:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

app.patch("/SimpleCRUDMongoDB/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const { password } = req.body;
    await Login.findOneAndUpdate({ userId: userId }, { password: password });
    res.status(200).json({ message: 'User updated successfully' });
  } catch (error) {
    console.error("Error updating login:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
//==================================================================
const storage = multer.diskStorage({
  destination(req, file, callback) {
    callback(null, './images'); //images
  },
  filename(req, file, callback) {
   callback(null, `${Date.now()}_${file.originalname}`);
  },
});

const upload = multer({ storage });


app.post('/image-upload', upload.array("my-image-file"), (req, res) => {
  console.log('POST request received to /image-upload.');
  console.log('Uploaded files: ', req.files);
});

//==========================server config==========================

const server = http.createServer(app);

server.listen(3001, process.env.IP, function(){
  console.log("SERVER IS RUNNING");
});